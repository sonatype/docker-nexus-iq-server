/*
 * Copyright (c) 2017-present Sonatype, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@Library(['private-pipeline-library', 'jenkins-shared']) _

import com.sonatype.jenkins.shared.Expectation

properties([
  parameters([
    run(name: 'releaseBuild',
        filter: 'SUCCESSFUL',
        projectName: 'insight/insight-brain/release',
        description: 'The latest release of IQ Server to build the docker image')
  ])
])

String imageName = 'sonatype/nexus-iq-server',
String version = ''
String checksum = ''

dockerizedBuildPipeline(
  deployBranch: 'main',
  prepare: {
    githubStatusUpdate('pending')
    version = getVersionFromBuildName(env.releaseBuild_NAME)
    checksum = readBuildArtifact('insight/insight-brain/release', env.releaseBuild_NUMBER, "artifacts/nexus-iq-server-${version}-bundle.tar.gz.sha256").trim()
    updateIQServerVersionAndChecksum(version, checksum)
    commitAndPushChanges(version)
  },
  setVersion: {
    env['VERSION'] = version.split('-')[0]
  },
  lint: {
    hadolint(['Dockerfile'])
  },
  postPrepareImage: {
    dir('build') {
      runSafely "docker save ${imageName} | gzip > docker-nexus-iq-server-${env.VERSION}.tar.gz"
    }
  },
  archiveArtifacts: 'build/*.tar.gz',
  buildAndTest: {
    currentBuild.displayName = "#${currentBuild.id} ${imageName}-${env.VERSION}"
    // TODO add tests
  },
  testResults: ['**/validate-expectations-results.xml'],
  vulnerabilityScan: {
    nexusPolicyEvaluation(
      iqApplication: 'docker-nexus-iq-server',
      iqScanPatterns: [[scanPattern: "container:${env.DOCKER_IMAGE_ID}"]],
      iqStage: 'release')
  },
  deploy: {
    withSonatypeDockerRegistry() {
      sh """docker tag $DOCKER_IMAGE_ID ${sonatypeDockerRegistryId()}/${imageName}-${env.BUILD_NUMBER}
            docker push ${sonatypeDockerRegistryId()}/${imageName}-${env.BUILD_NUMBER}
            docker rmi ${sonatypeDockerRegistryId()}/${imageName}-${env.BUILD_NUMBER}"""
    }
  },
  postDeploy: {
    sshagent(credentials: [sonatypeZionCredentialsId()]) {
      sh '''git config user.email "sonatype-zion@sonatype.com"
            git tag ${env.VERSION}
            git push origin ${env.VERSION}'''
    }
  },
  onSuccess: {
    githubStatusUpdate('success')
  },
  onFailure: {
    githubStatusUpdate('failure')
  }
)

void updateIQServerVersionAndChecksum(String version, String checksum) {
  def dockerFile = readFile(file: "${pwd()}/Dockerfile")
  def versionRegex = /(ARG IQ_SERVER_VERSION=)(\d\.\d{1,3}\.\d\-\d{2})/
  def shaRegex = /(ARG IQ_SERVER_SHA256=)([A-Fa-f0-9]{64})/

  dockerFile = dockerFile.replaceAll(versionRegex, "\$1${version}")
  dockerFile = dockerFile.replaceAll(shaRegex, "\$1${checksum}")

  writeFile(file: "${pwd()}/Dockerfile", text: dockerFile)
}

void commitAndPushChanges(String version) {
  runSafely 'git config --global push.default simple'
  sonatypeZionGitConfig()
  sshagent(credentials: [sonatypeZionCredentialsId()]) {
    runSafely 'git add .'
    runSafely "git diff --exit-code --cached || git commit -m 'Update to version ${version}'"

    // pull and merge any new commits on main so that the push doesn't fail
   runSafely 'git pull --no-rebase --no-edit origin main'
   runSafely 'git push origin HEAD:main
  }
}
