/*
 * Copyright (c) 2017-present Sonatype, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@Library(['private-pipeline-library', 'jenkins-shared']) _

properties([
  parameters([
    string(
      name: 'version',
      description: 'Version tag to apply to the image, like 1.140.0-ubi-1.'
    ),
  ]),
])

String imageName = 'sonatype/nexus-iq-server'
String version = ''
String checksum = ''

dockerizedBuildPipeline(
  deployBranch: 'main',
  prepare: {
    githubStatusUpdate('pending')
    version = getVersionFromBuildName(env.releaseBuild_NAME)
    checksum = readBuildArtifact('insight/insight-brain/release', env.releaseBuild_NUMBER, "artifacts/nexus-iq-server-${version}-bundle.tar.gz.sha256").trim()
    updateIQServerVersionAndChecksum(version, checksum)
    commitAndPushChanges(version)
  }
)

void updateIQServerVersionAndChecksum(String version, String checksum) {
  def dockerFile = readFile(file: 'Dockerfile.rh')
  def metaShortVersionRegex = /(release=")(\d\.\d{1,3}\.\d)(" \\)/
  def versionRegex = /(ARG IQ_SERVER_VERSION=)(\d\.\d{1,3}\.\d\-\d{2})/
  def shaRegex = /(ARG IQ_SERVER_SHA256=)([A-Fa-f0-9]{64})/
  dockerFile = dockerFile.replaceAll(metaShortVersionRegex,
      "\$1${version.substring(0, version.indexOf('-'))}\$3")
  dockerFile = dockerFile.replaceAll(versionRegex, "\$1${version}")
  dockerFile = dockerFile.replaceAll(shaRegex, "\$1${checksum}")

  writeFile(file: 'Dockerfile.rh', text: dockerFile.rh)
}

void commitAndPushChanges(String version) {
  runSafely 'git config --global push.default simple'
  sonatypeZionGitConfig()
  sshagent(credentials: [sonatypeZionCredentialsId()]) {
    runSafely 'git add .'
    runSafely "git diff --exit-code --cached || git commit -m 'Update IQ Server to ${version}.'"

    // pull and merge any new commits on main so that the push doesn't fail
    runSafely 'git pull --no-rebase --no-edit origin main'
    runSafely 'git push origin HEAD:main'
  }
}

node('ubuntu-zion') {
  try {
    stage('Preparation') {
      deleteDir()

      checkout scm

      sh 'docker system prune -a -f'
      sh '''
        wget -q -O preflight \
          https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/1.4.1/preflight-linux-amd64
        chmod 755 preflight
      '''
    }
    stage('Build') {
      withCredentials([
        usernamePassword(
            credentialsId: 'red-hat-quay-nexus-iq-server',
            usernameVariable: 'REGISTRY_LOGIN',
            passwordVariable: 'REGISTRY_PASSWORD'),
        string(
            credentialsId: 'red-hat-api-token',
            variable: 'API_TOKEN')
      ]) {
        sh 'PATH="$PATH:." VERSION=$version ./build_and_push_rh_image.sh'
      }
    }
  } finally {
    sh 'docker logout'
    sh 'docker system prune -a -f'
    sh 'git clean -f && git reset --hard origin/main'
  }
}
