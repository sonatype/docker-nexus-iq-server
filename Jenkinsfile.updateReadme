/*
 * Copyright (c) 2017-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/nexus/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
@Library(['private-pipeline-library', 'jenkins-shared']) _

String readme = ''
pipeline {
  agent { label InsightConstants.AGENT_LABEL }
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }
  stages {
    stage('Preparation') {
      steps {
        deleteDir()
        readme = readFile file: 'README.md', encoding: 'UTF-8'
        readme = readme.replaceAll("(?s)<!--.*?-->", "")
        readme = readme.replace("\"", "\\\"")
        readme = readme.replace("\n", "\\n")
        readme = readme.replace("\\\$", "\\\\\$")
      }
    }
    stage('Echo README.md') {
      steps {
        echo readme
      }
    }
    stage('Push README.md') {
      when { expression { env.BRANCH_NAME == 'main' } }
      steps {
        pushReadme(readme, 'sonatype', 'nexus-iq-server')
      }
    }
  }
}

def pushReadme(String readme, String organization, String dockerHubRepository) {
  withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_API_USERNAME', passwordVariable: 'DOCKERHUB_API_PASSWORD']]) {
    def response = httpRequest(
      httpMode: 'POST',
      url: 'https://hub.docker.com/v2/users/login',
      customHeaders: [[name: 'cache-control, value: 'no-cache']],
      contentType: 'APPLICATION_JSON',
      requestBody: """{ "username": "${env.DOCKERHUB_API_USERNAME}", "password": "${env.DOCKERHUB_API_PASSWORD}" }"""
    )

    def token = readJSON text: response
    def dockerHubApiToken = token.token

    response = httpRequest(
      customHeaders: [[name: 'authorization', value: "JWT ${dockerHubApiToken}"]],
      acceptType: 'APPLICATION_JSON',
      contentType: 'APPLICATION_JSON',
      httpMode: 'PATCH',
      requestBody: "{ \"full_description\": \"${readme}\" }",
      url: "https://hub.docker.com/v2/repositories/${organization}/${dockerHubRepository}/")

    sh 'docker logout'
  }
}
